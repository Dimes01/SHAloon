/// @file 
/// @brief Файл содержит определения специфичные для ViPNet CSP
///
/// @copyright Copyright (c) InfoTeCS. All Rights Reserved.

#ifndef _ITC_IMPORTITCCSP_H_
#define _ITC_IMPORTITCCSP_H_

#if !defined(__unix__) && !defined(__KERNEL__)
#include <Windows.h>
#endif // __unix__

#if !defined(__KERNEL__)
#include <wincrypt.h>
#endif // __KERNEL__

#include <cspsdk/import-itcs-crypt-base.h>

// CNG определения
#include <cspsdk/import-itcs-cng.h>

// ==================================================================
// Типы провайдеров.
// ==================================================================
/// Тип провайдера на основе алгоритма ГОСТ Р 34.10-2001
#define VPN_PROV_TYPE 2
/// Тип провайдера на основе алгоритма ГОСТ Р 34.10-2012 с длиной
/// ключа 256 бит
#define VPN_PROV_TYPE_2012_512 77
/// Тип провайдера на основе алгоритма ГОСТ Р 34.10-2012 с длиной
/// ключа 512 бит
#define VPN_PROV_TYPE_2012_1024 78

// ==================================================================
// Имена провайдеров.
// ==================================================================

/// Имя провайдера Инфотекс на основе алгоритма ГОСТ Р 34.10-2001.
/// ASCII версия.
#define VPN_DEF_PROV_A  "Infotecs Cryptographic Service Provider"
/// Имя провайдера Инфотекс на основе алгоритма ГОСТ Р 34.10-2001.
/// Unicode версия.
#define VPN_DEF_PROV_W L"Infotecs Cryptographic Service Provider"

/// Имя провайдера Инфотекс на основе алгоритма ГОСТ Р 34.10-2012.
/// с длиной ключа 256 бит. ASCII версия.
#define VPN_DEF_PROV_2012_512_A  "Infotecs GOST 2012/512 Cryptographic Service Provider"
/// Имя провайдера Инфотекс на основе алгоритма ГОСТ Р 34.10-2012.
/// с длиной ключа 256 бит. Unicode версия.
#define VPN_DEF_PROV_2012_512_W L"Infotecs GOST 2012/512 Cryptographic Service Provider"

/// Имя провайдера Инфотекс на основе алгоритма ГОСТ Р 34.10-2012.
/// с длиной ключа 512 бит. ASCII версия.
#define VPN_DEF_PROV_2012_1024_A  "Infotecs GOST 2012/1024 Cryptographic Service Provider"
/// Имя провайдера Инфотекс на основе алгоритма ГОСТ Р 34.10-2012.
/// с длиной ключа 512 бит. Unicode версия.
#define VPN_DEF_PROV_2012_1024_W L"Infotecs GOST 2012/1024 Cryptographic Service Provider"

#ifdef UNICODE
/// Имя провайдера Инфотекс на основе алгоритма ГОСТ Р 34.10-2001.
/// Версия char/Unicode в зависимости от 
/// определения UNICODE.
#define VPN_DEF_PROV VPN_DEF_PROV_W
/// Имя провайдера Инфотекс на основе алгоритма ГОСТ Р 34.10-2012.
/// с длиной ключа 256 бит. Версия char/Unicode в зависимости от 
/// определения UNICODE.
#define VPN_DEF_PROV_2012_512 VPN_DEF_PROV_2012_512_W
/// Имя провайдера Инфотекс на основе алгоритма ГОСТ Р 34.10-2012.
/// с длиной ключа 512 бит. Версия char/Unicode в зависимости от 
/// определения UNICODE.
#define VPN_DEF_PROV_2012_1024 VPN_DEF_PROV_2012_1024_W
#else
#define VPN_DEF_PROV VPN_DEF_PROV_A
#define VPN_DEF_PROV_2012_512 VPN_DEF_PROV_2012_512_A
#define VPN_DEF_PROV_2012_1024 VPN_DEF_PROV_2012_1024_A
#endif

// ==================================================================
// Параметры хеширования.
// ==================================================================

/// Параметр функции вычисления имитовставки - начальное значение.
/// Применим к функции CryptSetHashParam для подсчета имитовставки.
/// В качестве pbData должна передаваться последовательность байт 
/// представляющих начальное значение.
/// Может использоваться только до начала хеширования данных.
#define HP_HASHSTARTVECT 0x0008
/// Параметр хеширования - идентификатор параметров хеширования
/// (узел замены, подстановка).
/// Применим к функции CryptSetHashParam для подсчета хеш-функции
/// по ГОСТ Р 34.11-2001.
/// В качестве pbData должна передаваться строка, представляющая 
/// один из поддерживаемых идентификаторов параметров хеширования.
#define HP_OID 0x000a
#ifdef __unix__
/// Параметр PRF - label для функции PRF, в соответствии
/// с RFC 5246, RFC 4357 и Р 50.1.113.
/// Применим к функции CryptSetHashParam для подсчета PRF.
/// В качестве pbData должна передаваться последовательность байт 
/// представляющих lebel.
/// Не поддерживается в Linux.
#define HP_TLS1PRF_LABEL        0x0006
/// Параметр PRF - seed для функции PRF, в соответствии
/// с RFC 5246, RFC 4357 и Р 50.1.113.
/// Применим к функции CryptSetHashParam для подсчета PRF.
/// В качестве pbData должен передаваться последовательность байт 
/// представляющих seed.
/// Не поддерживается в Linux.
#define HP_TLS1PRF_SEED         0x0007
#endif

/// Параметр PBKDF2 - salt (RFC 2898)
/// Применим к функции CryptSetHashParam для алгоритмов CALG_PBKDF2_*.
/// В качестве pbData должен передаваться указатель на CRYPT_DATA_BLOB, в котором содержится 
/// последовательность байт соли.
#define HP_PBKDF2_SALT          0x0017

/// Параметр PBKDF2 - password (RFC 2898)
/// Применим к функции CryptSetHashParam для алгоритмов CALG_PBKDF2_*.
/// В качестве pbData должен передаваться указатель на CRYPT_DATA_BLOB, в котором содержится 
/// последовательность байт пароля.
#define HP_PBKDF2_PASSWORD      0x0018

/// Параметр PBKDF2 - iteration count (RFC 2898)
/// Применим к функции CryptSetHashParam для алгоритмов CALG_PBKDF2_*.
/// В качестве pbData должен передаваться указатель на DWORD, в котором содержится 
/// количество итераций.
/// На данный момент не поддерживается.
//#define HP_PBKDF2_COUNT         0x0019

// ==================================================================
// Параметры провайдера.
// ==================================================================

/// Параметр провайдера - идентификатор параметров хеширования
/// (узел замены, подстановка) в контексте провайдера по умолчанию.
/// см. ГОСТ Р 34.11-2001 и RFC 4357.
/// Применим к функциям CryptSetProvParam/CryptGetProvParam.
/// В качестве pbData должна передаваться/возвращается строка, представляющая 
/// один из поддерживаемых идентификаторов параметров хеширования.
#define PP_HASHOID            92
/// Параметр провайдера - идентификатор параметров шифрования
/// (узел замены, подстановка) в контексте провайдера по умолчанию.
/// см. ГОСТ 28147-89 и RFC 4357.
/// Применим к функциям CryptSetProvParam/CryptGetProvParam.
/// В качестве pbData должен передаваться/возвращается строка, представляющая 
/// один из поддерживаемых идентификаторов параметров шифрования.
#define PP_CIPHEROID          93
/// Параметр провайдера - идентификатор параметров подписи
/// (эллиптическая кривая) в контексте провайдера по умолчанию.
/// см. ГОСТ Р 34.10-2001, ГОСТ Р 34.10-2012, RFC 4357, Р 50.1.114.
/// Применим к функциям CryptSetProvParam/CryptGetProvParam.
/// В качестве pbData должен передаваться/возвращается строка, представляющая 
/// один из поддерживаемых идентификаторов параметров подписи.
#define PP_SIGNATUREOID       94
/// Параметр провайдера - идентификатор параметров Диффи-Хелмана
/// (эллиптическая кривая) в контексте провайдера по умолчанию.
/// см. ГОСТ Р 34.10-2001, ГОСТ Р 34.10-2012, RFC 4357, Р 50.1.114.
/// Применим к функциям CryptSetProvParam/CryptGetProvParam.
/// В качестве pbData должен передаваться/возвращается строка, представляющая
/// один из поддерживаемых идентификаторов параметров Диффи-Хелмана.
#define PP_DHOID              95

/// Параметр провайдера - перечисление поддерживаемых параметров хеширования
/// (узел замены, подстановка).
/// см. ГОСТ Р 34.11-2001 и RFC 4357.
/// Применим к функции CryptGetProvParam.
/// В качестве pbData возвращается строка, представляющая один из поддерживаемых 
/// идентификаторов параметров хеширования. Соглашения о вызовах при переборе 
/// значений аналогичны PP_ENUMCONTAINERS.
#define PP_ENUM_HASHOID 103
/// Параметр провайдера - перечисление поддерживаемых параметров шифрования
/// (узел замены, подстановка).
/// см. ГОСТ 28147-89 и RFC 4357.
/// Применим к функции CryptGetProvParam.
/// В качестве pbData возвращается строка, представляющая один из поддерживаемых 
/// идентификаторов параметров шифрования. Соглашения о вызовах при переборе 
/// значений аналогичны PP_ENUMCONTAINERS.
#define PP_ENUM_CIPHEROID 104
/// Параметр провайдера - перечисление поддерживаемых параметров подписи
/// (эллиптическая кривая).
/// см. ГОСТ Р 34.10-2001, ГОСТ Р 34.10-2012, RFC 4357, Р 50.1.114.
/// Применим к функции CryptGetProvParam.
/// В качестве pbData возвращается строка, представляющая один из поддерживаемых 
/// идентификаторов параметров подписи. Соглашения о вызовах при переборе 
/// значений аналогичны PP_ENUMCONTAINERS.
#define PP_ENUM_SIGNATUREOID 105
/// Параметр провайдера - перечисление поддерживаемых параметров Диффи-Хелмана
/// (эллиптическая кривая).
/// см. ГОСТ Р 34.10-2001, ГОСТ Р 34.10-2012, RFC 4357, Р 50.1.114.
/// Применим к функции CryptGetProvParam.
/// В качестве pbData возвращается строка, представляющая один из поддерживаемых 
/// идентификаторов параметров Диффи-Хелмана. Соглашения о вызовах при переборе 
/// значений аналогичны PP_ENUMCONTAINERS.
#define PP_ENUM_DHOID 106
/// Параметр провайдера - контейнер на текущем носителе по умолчанию.
/// Применим к функции CryptSetProvParam.
/// В качестве pbData должно передаваться строка, представляющая имя существующего 
/// контейнера на носителе.
/// После установки данный контейнер будет открываться при открытии передаче
/// в качестве имени контейнера \\\\\.\\reader
#define PP_CONTAINER_DEFAULT  135
/// Параметр провайдера - параметры шифрования (узел замены, 
///  подстановка), которые не поддерживаются провайдером.
/// Применим к функции CryptSetProvParam.
/// см. ГОСТ Р 28147-89, RFC 4357.
/// В качестве pbData должно передаваться ASN.1 структура 
/// Gost28147-89-ParamSetParameters в соответствии с RFC 4357.
#define PP_USER_ENCRYPTPARAMS 204 
/// Параметр провайдера - "тихий режим".
/// Применим к функции CryptSetProvParam.
/// Параметр pbData игнорируется.
/// После вызова функции CryptSetProvParam флаг CRYPT_SILENT,
/// указанный при открытии провайдера, в контексте провайдера сбрасывается.
#define PP_RESET_SILENT_FLAG 205
/// Параметр провайдера - удалить запомненный пароль или пин-код.
/// Применим к функции CryptSetProvParam.
/// Параметр pbData игнорируется.
/// После вызова функции CryptSetProvParam запомненный пин-код
/// для текущего открытого контейнера удаляется.
/// Не поддерживается в Linux.
#define PP_DELETE_PIN_FROM_REGISTRY  206
/// Параметр провайдера - тот же функционал, что и у PP_DELETE_PIN_FROM_REGISTRY.
/// Применим к функции CryptSetProvParam.
/// Не поддерживается в Linux.
#define PP_DELETE_PASS_FROM_REGISTRY  207
/// Параметр провайдера - имя контейнера.
/// Применим к функции CryptGetProvParam.
/// После вызова функции CryptGetProvParam возвращается строка, представляющая
/// короткое имя контейнера.
#define PP_SHORT_CONTAINER_NAME 220
/// Параметр провайдера - регламентный контроль ДСЧ.
/// Применим к функции CryptGetProvParam.
/// После вызова функции CryptGetProvParam возвращается
/// результат запуска регламентного контроля ДСЧ.
/// Параметр pbData не используется.
#define PP_RNG_REGLAMENT_CTRL 221
/// Параметр провайдера - тип регистрации CSP.
/// Применим к функции CryptGetProvParam.
/// Параметр pbData должен содержать указатель на переменную тип DWORD.
#define PP_CSP_REG_TYPE 222

// ==================================================================
// Параметры ключа.
// ==================================================================

/// Параметр ключа - режим модификации ключа.
/// см. RFC 4357.
/// Применим к функциям CryptGetKeyParam, CryptSetKeyParam для
/// ключей шифрования.
/// В качестве pbData передается/возвращается DWORD: 0, если не используется
/// режим модификации ключа и не 0, если режим модификации ключа
/// используется. 
#define KP_MIXMODE 101
/// Параметр ключа - идентификатор параметров хеширования
/// (узел замены, подстановка) в контексте ключа.
/// см. ГОСТ Р 34.11-2001 и RFC 4357.
/// Применим к функциям CryptSetKeyParam/CryptGetKeyParam.
/// В качестве pbData должна передаваться/возвращается строка, представляющая 
/// один из поддерживаемых идентификаторов параметров хеширования.
#define KP_HASHOID 103
/// Параметр ключа - идентификатор параметров шифрования
/// (узел замены, подстановка) в контексте ключа.
/// см. ГОСТ 28147-89 и RFC 4357.
/// Применим к функциям CryptSetKeyParam/CryptGetKeyParam.
/// В качестве pbData должен передаваться/возвращается строка, представляющая 
/// один из поддерживаемых идентификаторов параметров шифрования.
#define KP_CIPHEROID 104
/// Параметр ключа - идентификатор параметров подписи
/// (эллиптическая кривая) в контексте ключа.
/// см. ГОСТ Р 34.10-2001, ГОСТ Р 34.10-2012, RFC 4357, Р 50.1.114.
/// Применим к функциям CryptSetKeyParam/CryptGetKeyParam.
/// В качестве pbData должен передаваться/возвращается строка, представляющая 
/// один из поддерживаемых идентификаторов параметров подписи.
#define KP_SIGNATUREOID 105
/// Параметр ключа - идентификатор параметров Диффи-Хелмана
/// (эллиптическая кривая) в контексте ключа.
/// см. ГОСТ Р 34.10-2001, ГОСТ Р 34.10-2012, RFC 4357, Р 50.1.114.
/// Применим к функциям CryptSetKeyParam/CryptGetKeyParam.
/// В качестве pbData должен передаваться/возвращается строка, представляющая
/// один из поддерживаемых идентификаторов параметров Диффи-Хелмана.
#define KP_DHOID 106
/// Параметр ключа - алгоритм экспорта ключа.
/// Применим к функциям CryptSetKeyParam.
/// В качестве pbData должен передаваться DWORD, представляющая
/// алгоритм (CALG) экспорта ключа.
#define KP_EXPORTID  108
/// Параметр ключа - время окончания действия ключа.
/// Применим к функциям CryptGetKeyParam.
/// В качестве pbData возвращается FILETIME, представляющий дату
/// окончания срока действия ключа.
#define KP_EXPIRATION_DATE  213

// ==================================================================
// Флаги функций CryptSetProvParam/CryptGetProvParam.
// ==================================================================

/// Флаг функции CryptSetProvParam - проверка введенного пароля/пин-кода.
/// Если данный флаг установлен, то при вызове функции 
/// CryptSetProvParam(PP_SIGNATURE_PIN) или CryptSetProvParam(PP_KEYECHANGE_PIN)
/// будет проверен пароль/пин-код. Если пароль не верен, то функция вернет ошибку.
#define PP_VERIFYPASS_FLAG  0x00000001
/// Флаг функции CryptSetProvParam - сохранение введенного пароля.
/// Если данный флаг установлен, то при вызове функции 
/// CryptSetProvParam(PP_SIGNATURE_PIN) или CryptSetProvParam(PP_KEYECHANGE_PIN)
/// корректный пароль будет сохранен в реестре. 
/// Данный флаг имеет смысл только вместе с флагом #PP_VERIFYPASS_FLAG
#define PP_SAVEPASS_TO_REGISTRY_FLAG 0x00000008

/// Флаг функции CryptGetProvParam - перечисление уникальных имен контейнеров.
/// Если данный флаг установлен, то при вызове функции 
/// CryptGetProvParam(PP_ENUMCONTAINERS)
/// будет возвращаться уникальное имя контейнера, а не короткое.
#define CRYPT_UNIQUE 0x08 

// ==================================================================
// Значения CryptGetKeyParam/CryptSetKeyParam.
// ==================================================================

/// Паддинг по умолчанию.
#define DEFAULT_PADDING       0

/// Паддинг принятый в карте УЕК.
#define UEC_PADDING           4  

/// Паддинг отсутствует.
#define NO_PADDING            5

// ==================================================================
//Значения CryptGetKeyParam параметра PP_CSP_REG_TYPE
// ==================================================================

/// Не известный тип регистрации CSP
#define ITCS_CSP_REG_TYPE_UNKNOWN 0

/// Для распространения через сайт
#define ITCS_CSP_REG_TYPE_VIA_THE_WEBSITE 1

/// Пробная версия
#define ITCS_CSP_REG_TYPE_DEMO 2

/// В составе продуктов ViPNet
#define ITCS_CSP_REG_TYPE_PART_OF_VIPNET_PRODUCT 3

/// Частная поставка
#define ITCS_CSP_REG_TYPE_VIPNET_CSP_RESIDENT 4

// ==================================================================
// VTableProvStruc.
// ==================================================================

#if !defined( __KERNEL__ ) && !defined( SIGNATURE_RESOURCE_NUMBER )
/// Номер ресурса в DLL CSP, в которой хранится подпись CSP
#define SIGNATURE_RESOURCE_NUMBER       0x29A
/// Структура параметров провайдера.
typedef struct _VTableProvStruc {
     /// Версия структуры. Определяет используемые поля структуры.
     DWORD   Version;
     /// Адрес callback функции проверки целостности DLL. Определено для версии 1 и выше.
     FARPROC FuncVerifyImage;
     /// Адрес callback функции получения родительского HWND. Определено для версии 1 и выше.
     FARPROC FuncReturnhWnd;
     /// Тип провайдера. Определено для версии 2 и выше.
     DWORD   dwProvType;
     /// Контекст дополнительной информации для провайдера. Определено для версии 2 и выше.
     BYTE *pbContextInfo;
     /// Размер контекст дополнительной информации для провайдера. Определено для версии 2 и выше.
     DWORD     cbContextInfo;
     /// Имя провайдера. Определено для версии 3 и выше.
     LPSTR pszProvName;
} VTableProvStruc, *PVTableProvStruc;
#endif
/// Прототип функции получения родительского HWND
typedef BOOL ( WINAPI * PFNReturnhWnd  )( HWND * phWnd );
/// Прототип функции проверки целостности образа DLL
typedef BOOL ( WINAPI * PFNVerifyImage )( LPCSTR lpszImage, BYTE *pSigData );

#endif
